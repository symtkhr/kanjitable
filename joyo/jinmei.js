const JinmeiIngredients = {
    history: {
    "1951": "丑丞之乃也亘亦亥亨亮伊匡卯只吾呂哉嘉圭奈宏寅巌巳庄弘弥彦悌惣敦昌晋智暢晃朋桂桐楠橘欣欽毅浩淳熊爾猪玲琢瑞睦磯祐禄禎稔穣綾聡肇胤艶蔦藤蘭虎蝶輔辰郁酉錦鎌靖須馨駒鯉鯛鶴鹿麿亀仙尚杉甚磨斉龍",
    "1976": "佑允冴喬怜旭杏梓梢梨沙渚瑠瞳紘紗絢翠耶芙茜葵藍那阿隼鮎悠",
    "1981": "伍伶侑尭孟峻嵩嶺巴彬惟惇慧斐旦昂李栗槙楓汐洸洵渥瑛瑶璃甫皓眸矩碧笹緋翔脩苑茉莉萌萩蓉蕗虹諒赳迪遥遼霞頌駿鳩鷹",
    "1981許": "亙巖彌渚猪琢祐祿禎穰亞惡爲逸衞謁緣應櫻奧橫溫禍價海悔壞懷樂渴卷陷寬漢氣祈器僞戲虛峽狹響曉勤謹勳薰惠揭鷄藝擊縣儉劍險檢圈驗顯嚴恆黃廣國黑穀碎雜社視兒濕社者煮壽收臭從澁縱獸祝暑署緖諸敍將祥涉燒奬條狀淨乘剩疊孃讓釀神眞寢愼盡粹醉穗瀨齊靜攝節專戰纖禪祖爭壯莊搜巢裝僧層騷增藏憎臟贈卽帶滯單嘆團彈晝鑄著徵聽懲廳鎭轉傳都燈盜稻德突難拜梅賣髮拔繁晚卑祕碑賓敏侮福拂佛勉步墨飜每默藥與搖樣謠來賴覽欄龍虜綠淚壘類歷曆練鍊郞朗廊錄",
    "1990": "伎伽侃倭倖偲冶凌凜凪凱勁叡叶啄唄奎媛嬉宥崚嵐嵯巽彗彪恕憧拳捷捺於旺昴晏晟晨暉曙朔杜柊柾柚栞梧椎椋椿椰楊樺榛槻檀毬汀汰洲湧滉漱澪熙燎燦燿爽玖琳瑚瑳皐眉瞭碩秦稀稜竣笙絃紬綺綜綸耀胡舜芹茄茅莞菫菖蒔蒼蓮蕉衿袈裟詢誼諄邑醇采雛鞠颯魁鳳鴻鵬麟黎黛",
    "1997": "琉",
    "2004/2": "曽",
    "2004/6": "獅",
    "2004/7": "瀧毘駕",
    "2004/9reject": "蛙萎咽淫洩怨厭苛潰咳骸廓顎姦癌贋妓蟻仇噓怯狗姑狐股叩尻垢喉嚙乞痕挫斬屍覗髭痔餌𠮟蛭嫉膝腫呪讐妾娼蝕疹塵脆脊腺煽狙鼠搔唾腿蛋綻蜘吊剃溺妬賭蕩禿膿囊罵狽剝誹牝糞蔑呆吠悶爺狸賂弄牢歪",
    "2004/9": "串乎云些仔佃俄俠俣侶俐俺俱倦僅傭儲兎兜其冥冨凄凉凛凧凰函刹劉劫勃勾匂勿卜卿厨厩叉叢吞吻哨哩喰喧喋嘩嘗噂噌圃圓坐坦埼埴堆埜堰堺堵堯塞塡塙壕壬夷奄套妖娃姥姪娩孜宋宛宕寓實寵尖尤屑岡峨峯崖嶋已巷巾帖幌幡庇庚庵廟廻廿弛徠徽忽恢恰惚悉惹惺憐戊或戚戟戴托按拶拭挨捉挺挽掬捲捻捧掠揃摺摑撒撰撞播撫擢斑斡斧斯昊昏昧晒晄晦曖曝曳曾杖杵杭枕杷枇柑柵柿柘栃柏桔桁柴栖桧梶梗梯桶梛椛梁椅棲椀楯楚楕楢榎榊槍槌榮槇樟樋樫樽橙檎檜櫂櫛櫓歎此殆汝汎汲沌沓沫洛浬淀淋淵湘湊湛溜溢漕漣濡瀕灘灸灼烏焰焚煌煎煤煉燕燭爪牒牙牟牡牽犀狼玩珂珈珊珀琥琶琵瓜瓢瓦甥畏畠畢畿疋疏瘦盃瞥砧砥砦硯碓碗磐祁祇祢禮禱禰禽禾秤稟稽穿窄窟窪窺竪竺竿笈笠筑筈箔箕箸篇篠簞簾籾粥粟糊紐絆綴縞繫繡纂纏羚羨而耽肋肘肴脇腔腎膏膳臆臥臼舷舵芥芯芭芦苔苺茨茸荻莫菅萄菩萊菱萠葛萱葺董葡萬葦蓋蒐蒲蓑蒙蔭蔣蓬蔓蕎蕨蕃蕪蔽薙蕾薗藁薩蘇蜂蜜蝦螺蟬蟹蠟袖袴裡裾裳襖訊訣註詣詮詫諏誰謂諺諦謎讃豹貌貰貼賑跨蹄蹟蹴輯輿轟迂辻辿迄迦這逞逗逢遁遡遜遙鄭酎醐醒醍醬釉釘釜釧鋒鋸錫錐錆鍵鍬鍋鎧閃閏閤闇阜阪陀隈隙雀雁雫鞄鞍鞘鞭韓頁頃頓頗頰顚餅饗馴馳駈驍魯鰯鱒鱗鳶鴨鵜鷗鷲鷺麒麓鼎",
    "2009": "穹祷",
    "2010": "勺錘銑脹匁",
    "2015": "巫",
    "2017": "渾",
    },
    history_joyo: {
    "1981": "仙尚杉甚磨斉竜悠",
    "2010": "挨曖宛嵐畏萎椅彙茨咽淫唄鬱怨媛艶旺岡臆俺苛牙瓦楷潰諧崖蓋骸柿顎葛釜鎌韓玩伎亀毀畿臼嗅巾僅錦惧串窟熊詣憬稽隙桁拳鍵舷股虎錮勾梗喉乞傲駒頃痕沙挫采塞埼柵刹拶斬恣摯餌鹿𠮟嫉腫呪袖羞蹴憧拭尻芯腎須裾凄醒脊戚煎羨腺詮箋膳狙遡曽爽痩踪捉遜汰唾堆戴誰旦綻緻酎貼嘲捗椎爪鶴諦溺塡妬賭藤瞳栃頓貪丼那奈梨謎鍋匂虹捻罵剝箸氾汎阪斑眉膝肘訃阜蔽餅璧蔑哺蜂貌頰睦勃昧枕蜜冥麺冶弥闇喩湧妖瘍沃拉辣藍璃慄侶瞭瑠呂賂弄籠麓脇"
    },
    pair: "亘亙|凜凛|尭堯|巌巖|晃晄|桧檜|槙槇|渚渚|猪猪|琢琢|祐祐|祢禰|祷禱|禄祿|禎禎|穣穰|萌萠|遙遥",
    appendix: "乘乗|亞亜|佛仏|來来|傳伝|僞偽|價価|儉倹|兒児|冨富|凉涼|剩剰|劍剣|勳勲|卷巻|卽即|單単|嚴厳|圈圏|國国|圓円|團団|埜野|增増|壘塁|壞壊|壯壮|壽寿|奧奥|奬奨|孃嬢|寢寝|實実|寬寛|將将|專専|峯峰|峽峡|嶋島|巢巣|帶帯|廣広|廳庁|彈弾|彌弥|從従|徵徴|德徳|恆恒|惠恵|惡悪|愼慎|應応|懷懐|戰戦|戲戯|拂払|拔抜|拜拝|揭掲|搖揺|搜捜|擊撃|攝摂|收収|敍叙|晚晩|晝昼|曆暦|曉暁|曾曽|條条|榮栄|樂楽|樣様|橫横|檢検|櫻桜|步歩|歷歴|每毎|氣気|涉渉|淚涙|淨浄|渴渇|溫温|滯滞|澁渋|濕湿|瀧滝|瀨瀬|燈灯|燒焼|爭争|爲為|狀状|狹狭|獸獣|疊畳|瘦痩|盃杯|盜盗|盡尽|眞真|碎砕|祕秘|禪禅|禮礼|稻稲|穗穂|粹粋|綠緑|緖緒|緣縁|縣県|縱縦|纖繊|聽聴|臟臓|與与|莊荘|萬万|薗園|薰薫|藏蔵|藝芸|藥薬|虛虚|衞衛|裝装|覽覧|謠謡|讓譲|賣売|賴頼|轉転|郞郎|醉酔|釀醸|錄録|鍊錬|鎭鎮|鑄鋳|陷陥|險険|雜雑|靜静|顯顕|飜翻|駈駆|騷騒|驗験|髮髪|鷄鶏|黃黄|黑黒|默黙|齊斉|龍竜|欄欄|廊廊|朗朗|虜虜|類類|神神|祥祥|福福|諸諸|都都|侮侮|僧僧|勉勉|勤勤|卑卑|嘆嘆|器器|墨墨|層層|悔悔|憎憎|懲懲|敏敏|暑暑|梅梅|海海|漢漢|煮煮|碑碑|社社|祈祈|祖祖|祝祝|禍禍|穀穀|突突|節節|練練|繁繁|署署|者者|臭臭|著著|視視|謁謁|謹謹|賓賓|贈贈|逸逸|難難|響響",
    memo: `
亘亙:「亙」「亘」はもと別字
尭堯:「堯」が正字(実質旧字)
槙槇:「槇」が正字(実質旧字)
渚渚:「渚」が正字(実質旧字)
猪猪:「猪」が正字(実質旧字)
琢琢:「琢」が正字(実質旧字)
祐祐:「祐」が正字(実質旧字)
禄祿:「祿」が正字(実質旧字)
禎禎:「禎」が正字(実質旧字)
穰穣:「穰」が正字(実質旧字)
遙遥:「遙」が正字(実質旧字)
巖巌:「巖」が正字(実質旧字)
萠萌:「萌」が正字(実質標準字体)
凛凜:「凜」が正字(実質標準字体)
晄晃:「晃」が正字(実質標準字体)
祷禱:表外漢字字体表の簡易慣用字体/印刷標準字体
桧檜:表外漢字字体表では「檜」が印刷標準字体だが「桧」は簡易慣用字体ではない
祢禰:表外漢字字体表では「禰」が印刷標準字体だが「祢」は簡易慣用字体ではない
棲栖:「棲」「栖」は別字扱い？
芦:表外漢字字体表では「蘆」が印刷標準字体だが人名用漢字ではない
裡:表外漢字字体表では「裏」の異体字とあるが、人名用漢字表では別字扱い？
堺:「界」(常用)のもと異体字
阪:「坂」(常用)のもと異体字
徠:「来」(常用)とは別字扱い？
俐:「悧」とは別字扱い？
薗駈嶋盃冨峯埜凉:異体字
曾彌瘦:旧字(2010)
龍:旧字(1981)
亞惡爲逸榮衞謁圓緣應櫻奧橫溫禍價海悔壞懷樂渴卷陷寬漢氣祈器僞戲虛峽狹響曉勤謹勳薰惠揭鷄藝擊縣儉劍險檢圈驗顯嚴恆黃廣國黑穀碎雜社視兒濕實者煮壽收臭從澁縱獸祝暑署緖諸敍將祥涉燒奬條狀淨乘剩疊孃讓釀神眞寢愼盡粹醉穗瀨齊靜攝節專戰纖禪祖爭壯莊搜巢裝僧層騷增藏憎臟贈卽帶滯瀧單嘆團彈晝鑄著徵聽懲廳鎭轉傳都燈盜稻德突難拜梅賣髮拔繁晚卑祕碑賓敏侮福拂佛勉步墨飜每萬默藥與搖樣謠來賴覽欄虜綠淚壘類禮歷曆練鍊郞朗廊錄:旧字
`,
};

let jintable = (() => {
    let src = JinmeiIngredients;
    let jmemo = src.memo.split("\n").map(v => v.split(":"));
    let jpair = src.pair.split("|");
    let jappendix = src.appendix.split("|");
    return Object.entries(src.history).map(([act,v]) => {
        if (act.indexOf("reject") != -1) return;
        return v.split("").map(c => {
            if (c == "龍" && act == "1981許") return;
            let itaiji = [...jpair, ...jappendix].find(v=>v.indexOf(c)!=-1) || ""
            let memo = jmemo.find(v=>v[0].indexOf(c)!=-1) || [];
            let fuhyo = jappendix.find(v=>v.indexOf(c) == 0);
            let out = Object.entries(src.history_joyo).find(([key,v]) => v.indexOf(c) != -1) || [];
            return {c:c, act:act, out:out[0], fuhyo:fuhyo,
                    itaiji:itaiji.split(c).join(""), memo:(memo[1]||"")};
        });
    })
})().reduce((sum,row)=>sum.concat(row)).filter(v=>v);

let main = () => {
    const $id = (id) => document.getElementById(id);
    const $q = (query, $dom) => [... ($dom ? $dom : document).querySelectorAll(query)];
    const $c = (cname, $dom) => [... ($dom ? $dom : document).getElementsByClassName(cname)];
    const $new = (tag) =>  document.createElement(tag);
    const STROKES = $id("radicalstrokes").innerText.split("|").map(s=>s.trim().split(":"));

    let show_rows = () => {
        $id("jinmei").innerText = "";
        $id("jinmei2").innerText = "";
        sorttable(decodeURI(location.hash.split("#").pop()));
        let count = 0;
        jintable.filter(v=>!v.fuhyo).map(v => {
            let $tr = $new("tr");
            $id("jinmei").appendChild($tr);
            if (!v.out) count++;
            let no = (!v.out ? count : "-" );
            let his = v.act + (v.out ? ("〜" + v.out) : "");
            $tr.innerHTML = [no, v.c, v.bushu, v.itaiji, his, v.memo].map(s => "<td>" + s + "</td>").join("");
            if (v.out) $tr.style.backgroundColor = "#ccc";
        });
        jintable.filter(v=>v.fuhyo).map((v,no) => {
            let $tr = $new("tr");
            $id("jinmei2").appendChild($tr);
            let his = v.act + (v.out ? ("〜" + v.out) : "");
            $tr.innerHTML = [no + 1, v.c, v.bushu, v.itaiji, his, v.memo].map(s => "<td>" + s + "</td>").join("");
            if (v.out) $tr.style.backgroundColor = "#ccc";
        });
    };

    let sorttable = (v) => {
        if (!v || v == "bushu") return jintable.sort((a,b)=> {
            if (a.bushu[0] == b.bushu[0]) return parseInt(a.bushu.slice(1)) - parseInt(b.bushu.slice(1));
            return a.bushu[0] < b.bushu[0] ? -1:1;
        });
        if (v == "act") return jintable.sort((a,b)=> a.act < b.act ? -1 : 1);
        if (v == "out") return jintable.sort((a,b)=> (a.out||"") < (b.out||"") ? -1 : 1);
        if (v == "strokes") return jintable.sort((a,b) => a.bushu.split("/").pop() - b.bushu.split("/").pop());
        if (v == "itaiji") jintable.sort((a,b)=>(a.itaiji||"･")<(b.itaiji||"･")?-1:1);
    };

    jintable.map(v => v.bushu = ((STROKES||[]).find(row => row[0] == v.c) || []).slice(1,2)[0]);
    show_rows();
    window.addEventListener('hashchange', () => { show_rows(); });
};

if (typeof window == "undefined" && module) {
    module.exports = jintable;
} else {
    window.onload = main;
}

